# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
from dotenv import load_dotenv
load_dotenv()

import logging  # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import base64
import sqlite3  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from datetime import datetime  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º

import pandas as pd  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
from docx import Document  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Word-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
from github import Github, UnknownObjectException, GithubException  # –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å GitHub API
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup  # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Telegram Bot API
from telegram.ext import (
    Application,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π

# –ö–æ–Ω—Ñ–∏do–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = os.getenv('TELEGRAM_TOKEN')  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_IDS = [429442647]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')  # –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ GitHub
REPO_NAME = os.getenv('GITHUB_REPO_URL')  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub
DB_FILE = "repair_requests.db"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
CONTACT, DESCRIPTION, TIME = range(3)  # –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞: –∫–æ–Ω—Ç–∞–∫—Ç—ã, –æ–ø–∏—Å–∞–Ω–∏–µ, –≤—Ä–µ–º—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


class DatabaseManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite"""

    def __init__(self, db_name):
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å datetime
        sqlite3.register_adapter(datetime, lambda val: val.isoformat())
        sqlite3.register_converter("datetime", lambda b: datetime.fromisoformat(b.decode()))

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∏–ø–æ–≤
        self.conn = sqlite3.connect(db_name, detect_types=sqlite3.PARSE_DECLTYPES)
        self._create_table()

    def _create_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS requests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                contact_info TEXT,
                problem_description TEXT,
                preferred_time TEXT,
                created_at DATETIME
            )
        ''')
        self.conn.commit()

    def add_request(self, user_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO requests 
            (user_id, username, contact_info, problem_description, preferred_time, created_at)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            user_data['user_id'],
            user_data['username'],
            user_data['contact_info'],
            user_data['description'],
            user_data['time'],
            datetime.now()
        ))
        self.conn.commit()

    def get_all_requests(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM requests')
        return cursor.fetchall()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseManager(DB_FILE)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π.
cancel_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
])


### –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ###
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/new_request - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if user.id in ADMIN_IDS:
        text += "\n/export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"

    await update.message.reply_text(text)

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üîß –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/new_request - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "'—Ä–µ–º–æ–Ω—Ç' - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n"
        "'–ø–æ–º–æ—â—å' - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )
    await update.message.reply_text(help_text)

async def new_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email):",
        reply_markup=cancel_keyboard
    )
    return CONTACT

async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    contact_info = update.message.text
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    if not ('@' in contact_info or any(c.isdigit() for c in contact_info)):
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:", reply_markup=cancel_keyboard)
        return CONTACT
    context.user_data['contact_info'] = contact_info
    await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=cancel_keyboard)
    return DESCRIPTION

async def description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    if update.callback_query and update.callback_query.data == 'cancel':
        return await cancel(update, context)

    context.user_data['description'] = update.message.text
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=cancel_keyboard
    )
    return TIME

async def time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if update.callback_query and update.callback_query.data == 'cancel':
        return await cancel(update, context)

    context.user_data['time'] = update.message.text
    user_data = {
        'user_id': update.effective_user.id,
        'username': update.effective_user.username,
        **context.user_data
    }

    db.add_request(user_data)
    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    return ConversationHandler.END

async def export_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("Excel", callback_data='export_excel'),
                InlineKeyboardButton("Word", callback_data='export_doc')
            ],
            [InlineKeyboardButton("Text", callback_data='export_txt')]
        ])
    )

async def export_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    global filename, file_type
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    if query.data not in ['export_excel', 'export_doc', 'export_txt']:
        await query.message.edit_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    requests = db.get_all_requests()
    df = pd.DataFrame(requests, columns=[
        'ID', 'User ID', 'Username', 'Contact', 'Description',
        'Preferred Time', 'Created At'
    ])

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if query.data == 'export_excel':
            filename = f"requests_{datetime.now().strftime('%Y%m%d%H%M')}.xlsx"
            df.to_excel(filename, index=False)
            file_type = "Excel"

        elif query.data == 'export_doc':
            filename = f"requests_{datetime.now().strftime('%Y%m%d%H%M')}.docx"
            doc = Document()
            doc.add_heading('–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç', 0)
            for _, row in df.iterrows():
                doc.add_paragraph(
                    f"ID: {row['ID']}\n"
                    f"User ID: {row['User ID']}\n"
                    f"Username: {row['Username']}\n"
                    f"Contact: {row['Contact']}\n"
                    f"Description: {row['Description']}\n"
                    f"Preferred Time: {row['Preferred Time']}\n"
                    f"Created At: {row['Created At']}\n"
                    "\n---\n"
                )
            doc.save(filename)
            file_type = "Word"

        elif query.data == 'export_txt':
            filename = f"requests_{datetime.now().strftime('%Y%m%d%H%M')}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(df.to_string(index=False))
            file_type = "Text"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(filename, 'rb') as f:
            await query.message.reply_document(
                document=f,
                caption=f"–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ {file_type} –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ"
            )

        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        await query.message.edit_reply_markup(reply_markup=None)

    except Exception as e:
        logging.error(f"Export error: {str(e)}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ")

    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if 'filename' in locals():
            if os.path.exists(filename):
                os.remove(filename)


async def sync_with_github(context: ContextTypes.DEFAULT_TYPE):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å GitHub"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if not GITHUB_TOKEN or not REPO_NAME:
            raise ValueError("Missing GitHub credentials in environment variables")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        g = Github(GITHUB_TOKEN)

        try:
            repo = g.get_repo(REPO_NAME)
        except UnknownObjectException:
            raise ValueError(f"Repository {REPO_NAME} not found")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not os.path.exists(DB_FILE):
            raise FileNotFoundError(f"Local database file {DB_FILE} not found")

        # –ß—Ç–µ–Ω–∏–µ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        with open(DB_FILE, 'rb') as f:
            content = f.read()
        encoded_content = base64.b64encode(content).decode('utf-8')

        # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        try:
            contents = repo.get_contents(DB_FILE, ref="main")
            update_result = repo.update_file(
                path=DB_FILE,
                message="Automatic DB sync",
                content=encoded_content,
                sha=contents.sha,
                branch="main"
            )
            logging.info(f"File updated: {update_result['commit'].html_url}")

        except UnknownObjectException:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            create_result = repo.create_file(
                path=DB_FILE,
                message="Automatic DB sync",
                content=encoded_content,
                branch="main"
            )
            logging.info(f"File created: {create_result['commit'].html_url}")

    except GithubException as ge:
        logging.error(f"GitHub API Error: {ge.data.get('message')}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ Telegram
        await context.bot.send_message(
            chat_id=ADMIN_IDS[0],
            text=f"‚ö†Ô∏è GitHub sync failed: {ge.data.get('message')}"
        )

    except FileNotFoundError as fe:
        logging.error(f"Local file error: {str(fe)}")

    except ValueError as ve:
        logging.error(f"Configuration error: {str(ve)}")

    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}")
        await context.bot.send_message(
            chat_id=ADMIN_IDS[0],
            text=f"‚ö†Ô∏è Critical sync error: {str(e)}"
        )

    else:
        logging.info("Database sync completed successfully")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    query = update.callback_query
    if query:
        await query.answer()
        await query.message.edit_reply_markup(reply_markup=None)
        await query.message.reply_text("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        await update.message.reply_text("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    context.user_data.clear()
    return ConversationHandler.END


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('new_request', new_request),
            MessageHandler(filters.Regex(r'(?i)\b(—Ä–µ–º–æ–Ω—Ç[–∞—É]?|—Å–ª–æ–º–∞–ª(—Å—è|–∞—Å—å)?|–ø–æ–ª–æ–º–∫[–∞–∏])\b|–Ω–µ\s+—Ä–∞–±–æ—Ç–∞–µ—Ç'), new_request)
        ],
        states={
            CONTACT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, contact),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, description),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            TIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, time),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', show_help))
    application.add_handler(CommandHandler('export', export_data))
    application.add_handler(CallbackQueryHandler(export_callback, pattern="^export_"))
    application.add_handler(conv_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub (–∫–∞–∂–¥—ã–π —á–∞—Å)
    application.job_queue.run_repeating(
        sync_with_github,
        interval=3600,
        first=10
    )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()